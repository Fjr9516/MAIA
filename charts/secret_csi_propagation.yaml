{ { - range .Values.users } }
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: { { .user } }-vault-secret
spec:
  secretObjects: # [OPTIONAL] SecretObject defines the desired state of synced K8s secret objects
    - data:
        - key: user                           # data field to populate
          objectName: user
        - key: email
          objectName: email # name of the mounted content to sync. this could be the object name or the object alias
        - key: ssh_publickey
          objectName: ssh_publickey
      secretName: user-{{ .user}}-secret                     # name of the Kubernetes Secret object
      type: Opaque
  provider: vault
  parameters:
    vaultAddress: { { $.Values.vault_url } }
    roleName: { { $.Values.vault_role } }
    objects: |
      - objectName: "user"
        secretPath: "{{ $.Values.team_ID }}/data/{{ .user}}"
        secretKey: "user"
      - objectName: "email"
        secretPath: "{{ $.Values.team_ID }}/data/{{ .user}}"
        secretKey: "email"
      - objectName: "ssh_publickey"
        secretPath: "{{ $.Values.team_ID }}/data/{{ .user}}"
        secretKey: "ssh_publickey"
---
apiVersion: policy.karmada.io/v1alpha1
kind: PropagationPolicy
metadata:
  name: { { .user } }-vault-secret-propagation
spec:
  resourceSelectors:
    - apiVersion: secrets-store.csi.x-k8s.io/v1
      kind: SecretProviderClass
      name: { { .user } }-vault-secret
  placement:
    clusterAffinity:
      clusterNames:
        {{- toYaml $.Values.secret_clusters | nindent 8 }}
  { { - end } }